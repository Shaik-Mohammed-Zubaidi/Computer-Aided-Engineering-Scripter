[
  {
    "input": "Create a 25 × 25 × 25 mm solid cube named Cube1",
    "output": "from abaqus import *\nfrom abaqusConstants import *\n\n# Create a new model database\nMdb()\n\n# Create a new part named 'Cube1'\npartName = 'Cube1'\ncubeSize = 25.0  # Size of the cube in mm\n\n# Create a solid cube\ns = mdb.models['Model-1'].Part(name=partName, dimensionality=THREE_D, type=DEFORMABLE_BODY)\ns.BaseSolidCube(size=cubeSize)"
  },
  {
    "input": "Create a 10 mm × 10 mm × 10 mm cube named Cube1 assign Steel (E=210 GPa, ν=0.3), mesh with 5 mm elements and generate a job called CubeJob",
    "output": "from abaqus import *\nfrom abaqusConstants import *\n\n# Create a new model database\nMdb()\n\n# Create a new model\nmodelName = 'Model-1'\nmodel = mdb.models[modelName]\n\n# Create a cube part\npartName = 'Cube1'\ncube = model.Part(name=partName, dimensionality=THREE_D, type=DEFORMABLE_BODY)\ncube.BaseSolidCube(size=10.0)  # Create a 10 mm cube\n\n# Define material properties for Steel\nmaterialName = 'Steel'\nsteelMaterial = model.Material(name=materialName)\nsteelMaterial.Elastic(table=((210E9, 0.3),))  # E=210 GPa, ν=0.3\n\n# Create a section and assign it to the cube\nsectionName = 'SteelSection'\nsection = model.HomogeneousSolidSection(name=sectionName, material=materialName)\nregion = (cube.cells,)\ncube.SectionAssignment(region=region, sectionName=sectionName)\n\n# Mesh the part with 5 mm elements\ncube.setMeshControls(elemShape=HEX, regions=cube.cells)\ncube.generateMesh()\n\n# Create a job for the model\njobName = 'CubeJob'\njob = mdb.Job(name=jobName, model=modelName)\n\n# Save the model database\nmdb.save()"
  },
  {
    "input": "Mesh the cube with 5 mm elements and print the total element count",
    "output": "from abaqus import *\nfrom abaqusConstants import *\nimport mesh\n\n# Create a new model database\nMdb()\n\n# Create a cube part\npartName = 'Cube'\ns = mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=10.0)\ns.rectangle(point1=(-5.0, -5.0), point2=(5.0, 5.0))\np = mdb.models['Model-1'].Part(name=partName, dimensionality=THREE_D, type=DEFORMABLE_BODY)\np.BaseSolidExtrude(sketch=s, depth=10.0)\n\n# Define the mesh size\nelementSize = 5.0\n\n# Generate the mesh\np.setMeshControls(elemShape=HEX, regions=(p.cells,), technique=STRUCTURED)\np.seedPart(size=elementSize, deviationFactor=0.1, minSizeFactor=0.1)\np.generateMesh()\n\n# Get the total element count\ntotalElements = len(p.elements)\n\n# Print the total element count\nprint('Total element count:', totalElements)"
  },
  {
    "input": "Add a material Steel (E = 210 GPa, ν = 0.3) and assign it to Cube1.",
    "output": "from abaqus import *\nfrom abaqusConstants import *\n\n# Create a new model database\nmdb = Mdb()\n\n# Create a new material named 'Steel'\nsteel_material = mdb.Material(name='Steel')\nsteel_material.Elastic(table=((210E9, 0.3),))  # E = 210 GPa, ν = 0.3\n\n# Create a new part named 'Cube1'\ncube1 = mdb.models['Model-1'].Part(name='Cube1', dimensionality=THREE_D, type=DEFORMABLE_BODY)\n\n# Define the cube's geometry (1x1x1 unit cube)\ncube1.BaseSolidCube(size=1.0)\n\n# Create a section and assign the material to it\nsection = mdb.models['Model-1'].HomogeneousSolidSection(name='SteelSection', material='Steel')\ncube1.SectionAssignment(region=cube1.Set(cells=cube1.cells, name='Cube1Set'), sectionName='SteelSection')"
  },
  {
    "input": "Create a job called CubeJob, run it, and wait for completion.",
    "output": "from abaqus import *\nfrom abaqusConstants import *\n\n# Create a job named 'CubeJob'\njob = mdb.Job(name='CubeJob', model='Model-1')\n\n# Submit the job for execution\njob.submit()\n\n# Wait for the job to complete\njob.waitForCompletion()"
  },
  {
    "input": "Parameterize the cube edge length as variable L = 10, 20, 30 mm and run three analyses in a loop",
    "output": "from abaqus import *\nfrom abaqusConstants import *\nimport job\n\n# Define the edge lengths for the cube\nedge_lengths = [10.0, 20.0, 30.0]  # in mm\n\n# Loop through each edge length\nfor L in edge_lengths:\n    # Create a new model\n    model_name = f'CubeModel_L{L}'\n    mdb.Model(name=model_name)\n    \n    # Create a sketch for the cube\n    s = mdb.models[model_name].ConstrainedSketch(name='CubeSketch', sheetSize=2*L)\n    s.rectangle(point1=(0, 0), point2=(L, L))  # Create a square base\n    \n    # Create a part from the sketch\n    p = mdb.models[model_name].Part(name='Cube', dimensionality=THREE_D, type=DEFORMABLE_BODY)\n    p.BaseSolidExtrude(sketch=s, depth=L)  # Extrude to form a cube\n    \n    # Create a material\n    material_name = 'Steel'\n    mdb.models[model_name].Material(name=material_name)\n    mdb.models[model_name].materials[material_name].Elastic(table=((210E3, 0.3),))  # Young's modulus and Poisson's ratio\n    \n    # Create a section and assign it to the cube\n    section_name = 'CubeSection'\n    mdb.models[model_name].HomogeneousSolidSection(name=section_name, material=material_name)\n    region = p.Set(cells=p.cells, name='CubeRegion')\n    p.SectionAssignment(region=region, sectionName=section_name)\n    \n    # Create an assembly\n    a = mdb.models[model_name].rootAssembly\n    a.Instance(name='CubeInstance', part=p, dependent=ON)\n    \n    # Create a step for analysis\n    mdb.models[model_name].StaticStep(name='LoadStep', previous='Initial')\n    \n    # Create a job and submit it\n    job_name = f'CubeJob_L{L}'\n    mdb.Job(name=job_name, model=model_name, description='Job for cube analysis', type=ANALYSIS)\n    mdb.jobs[job_name].submit()\n    mdb.jobs[job_name].waitForCompletion()  # Wait for the job to complete before proceeding"
  },
  {
    "input": "Model a cantilever beam: 200 mm long, square cross-section 20 mm, mesh with B31 elements, fixed at X = 0, 1000 N tip load at X = 200, and output the tip displacement.",
    "output": "from abaqus import *\nfrom abaqusConstants import *\nimport mesh\n\n# Create a new model\nmodel_name = 'CantileverBeam'\nmyModel = mdb.Model(name=model_name)\n\n# Create a sketch for the beam profile\nsketch = myModel.ConstrainedSketch(name='BeamProfile', sheetSize=100.0)\nsketch.rectangle(point1=(0.0, 0.0), point2=(20.0, 20.0))  # 20 mm x 20 mm square cross-section\n\n# Create a part from the sketch\nbeam_part = myModel.Part(name='CantileverBeam', dimensionality=THREE_D, type=DEFORMABLE_BODY)\nbeam_part.BaseSolidExtrude(sketch=sketch, depth=200.0)  # 200 mm length\n\n# Create a material\nmaterial_name = 'Steel'\nmyMaterial = myModel.Material(name=material_name)\nmyMaterial.Elastic(table=((210E3, 0.3), ))  # Young's modulus in MPa and Poisson's ratio\n\n# Create a section and assign it to the part\nsection_name = 'BeamSection'\nmySection = myModel.HomogeneousSolidSection(name=section_name, material=material_name)\nregion = beam_part.Set(cells=beam_part.cells, name='BeamRegion')\nbeam_part.SectionAssignment(region=region, sectionName=section_name)\n\n# Create an assembly\nassembly = myModel.rootAssembly\ninstance = assembly.Instance(name='BeamInstance', part=beam_part, dependent=ON)\n\n# Define the step for loading\nmyModel.StaticStep(name='LoadStep', previous='Initial')\n\n# Apply boundary condition (fixed at X=0)\nfixed_region = assembly.Set(vertices=instance.vertices.findAt(((0.0, 0.0, 0.0),)), name='FixedEnd')\nmyModel.EncastreBC(name='FixedBC', createStepName='LoadStep', region=fixed_region)\n\n# Apply the tip load (1000 N at X=200)\nload_region = assembly.Set(vertices=instance.vertices.findAt(((200.0, 10.0, 0.0),)), name='TipLoad')\nmyModel.ConcentratedForce(name='TipLoad', createStepName='LoadStep', region=load_region, cf1=-1000.0)  # Negative for downward load\n\n# Mesh the part with B31 elements\nbeam_part.setMeshControls(elemShape=QUAD, regions=region, technique=STRUCTURED)\nbeam_part.generateMesh()\n\n# Create a job and submit it\njob_name = 'CantileverBeamJob'\nmyJob = mdb.Job(name=job_name, model=model_name, description='Job for cantilever beam analysis')\nmyJob.submit()\nmyJob.waitForCompletion()\n\n# Output the tip displacement\nodb_path = job_name + '.odb'\nodb = session.openOdb(name=odb_path)\nlast_frame = odb.steps['LoadStep'].frames[-1]\ndisplacement_field = last_frame.fieldOutputs['U']\ntip_displacement = displacement_field.getSubset(region=load_region).values[0].data\n\n# Print the tip displacement\nprint('Tip Displacement (mm):', tip_displacement[1] * 1000)  # Convert from m to mm"
  },
  {
    "input": "Build two concentric cylinders (r = 40 mm and 50 mm) and subtract to make a hollow pipe 400 mm long; mesh, assign aluminum, and evaluate hoop stress at mid-length",
    "output": "from abaqus import *\nfrom abaqusConstants import *\n\n# Create a new model\nmodelName = 'HollowPipeModel'\nmyModel = mdb.Model(name=modelName)\n\n# Create a sketch for the outer cylinder\ns = myModel.ConstrainedSketch(name='OuterCylinderSketch', sheetSize=100.0)\ns.CircleByCenterPerimeter(center=(0.0, 0.0), point1=(50.0, 0.0))  # Outer radius 50 mm\n\n# Create the outer cylinder part\nouterCylinder = myModel.Part(name='OuterCylinder', dimensionality=THREE_D, type=DEFORMABLE_BODY)\nouterCylinder.BaseSolidExtrude(sketch=s, depth=400.0)  # Length 400 mm\n\n# Create a sketch for the inner cylinder\ns = myModel.ConstrainedSketch(name='InnerCylinderSketch', sheetSize=100.0)\ns.CircleByCenterPerimeter(center=(0.0, 0.0), point1=(40.0, 0.0))  # Inner radius 40 mm\n\n# Create the inner cylinder part\ninnerCylinder = myModel.Part(name='InnerCylinder', dimensionality=THREE_D, type=DEFORMABLE_BODY)\ninnerCylinder.BaseSolidExtrude(sketch=s, depth=400.0)  # Length 400 mm\n\n# Create a boolean operation to subtract the inner cylinder from the outer cylinder\nhollowPipe = myModel.Part(name='HollowPipe', dimensionality=THREE_D, type=DEFORMABLE_BODY)\nhollowPipe = outerCylinder.copy()  # Copy outer cylinder\nhollowPipe.Set(name='OuterSet', cells=hollowPipe.cells)  # Set for outer cylinder\nmyModel.parts['HollowPipe'].Boolean(name='SubtractInner', operation=SUBTRACT, \n                                     toolParts=(innerCylinder,))\n\n# Assign material properties\nmaterialName = 'Aluminum'\nmyMaterial = myModel.Material(name=materialName)\nmyMaterial.Elastic(table=((70000.0, 0.33),))  # Young's modulus and Poisson's ratio for aluminum\n\n# Create a section and assign it to the hollow pipe\nsectionName = 'PipeSection'\nmySection = myModel.HomogeneousSolidSection(name=sectionName, material=materialName)\nhollowPipe.SectionAssignment(region=hollowPipe.Set(name='HollowPipeSet', cells=hollowPipe.cells), sectionName=sectionName)\n\n# Mesh the hollow pipe\nhollowPipe.seedPart(size=10.0)  # Seed size for mesh\nhollowPipe.generateMesh()  # Generate the mesh\n\n# Create a job and submit it for analysis\njobName = 'HollowPipeJob'\nmyJob = mdb.Job(name=jobName, model=modelName, description='Job for hollow pipe analysis')\nmyJob.submit()\nmyJob.waitForCompletion()\n\n# Evaluate hoop stress at mid-length\nfrom odbAccess import *\nodb = openOdb(path=jobName+'.odb')\nstep = odb.steps[odb.steps.keys()[-1]]  # Get the last step\nframe = step.frames[-1]  # Get the last frame\nstressField = frame.fieldOutputs['S']  # Get stress field output\nhoopStress = stressField.getSubset(region=hollowPipe.Set(name='HollowPipeSet', cells=hollowPipe.cells)).values\n\n# Extract and print hoop stress values\nfor stress in hoopStress:\n    if stress.label == 'S22':  # Hoop stress component\n        print('Hoop Stress at mid-length:', stress.data)  # Print hoop stress value\n\nodb.close()  # Close the ODB file"
  }
]